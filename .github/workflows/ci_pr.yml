name: pr_check_generate

on:
  pull_request:
    branches: ['main']

jobs:
  generate_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies 📦
        run: bun install

      - name: Generate development environment 💚
        run: bun generate

      # 生成物を静的サーバーで公開
      - name: Start static server
        run: |
          npx serve -s ./.output/public -l 3000 &
      
      - name: Wait for server to be ready
        run: sleep 10

      # Puppeteer を用いてスクリーンショットを取得
      - name: Capture screenshot with Puppeteer
        run: |
          npm install puppeteer
          cat << 'EOF' > screenshot.js
          const puppeteer = require('puppeteer');
          (async () => {
            const browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });
            const page = await browser.newPage();
            await page.goto('http://localhost:3000/clock?color=000000&position=bottomLeft', { waitUntil: 'networkidle0' });
            await page.screenshot({ path: 'screenshot.png', fullPage: true });
            await browser.close();
          })();
          EOF
          node screenshot.js

      # 取得したスクリーンショットをアーティファクトとしてアップロード
      - name: Upload screenshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: screenshot
          path: screenshot.png

      # Gyazo API を利用して画像アップロードし、画像URLとimage_idを取得
      - name: Upload screenshot to Gyazo
        id: gyazo
        run: |
          response=$(curl -s -F "access_token=${{ secrets.GYAZO_ACCESS_TOKEN }}" -F "imagedata=@screenshot.png" https://upload.gyazo.com/api/upload)
          echo "Gyazo API response: $response"
          image_url=$(echo "$response" | jq -r '.url')
          image_id=$(echo "$response" | jq -r '.image_id')
          echo "Uploaded image URL: $image_url"
          echo "Uploaded image ID: $image_id"
          echo "image_url=$image_url" >> $GITHUB_OUTPUT
          echo "image_id=$image_id" >> $GITHUB_OUTPUT
        env:
          GYAZO_ACCESS_TOKEN: ${{ secrets.GYAZO_ACCESS_TOKEN }}

      # PRコメントにGyazoでアップロードされた画像のURLを利用してコメントを投稿
      - name: Post screenshot to PR comment via Gyazo URL
        uses: actions/github-script@v6
        with:
          script: |
            const imageUrl = "${{ steps.gyazo.outputs.image_url }}";
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### 生成物のスクリーンショット\n![screenshot](${imageUrl})`
            });
      
      # PRコメント投稿後、Gyazo側の画像を削除
      - name: Delete image from Gyazo
        run: |
          curl -s -X DELETE "https://api.gyazo.com/api/images/${{ steps.gyazo.outputs.image_id }}?access_token=${{ secrets.GYAZO_ACCESS_TOKEN }}"
          echo "Deleted Gyazo image with ID: ${{ steps.gyazo.outputs.image_id }}"
        env:
          GYAZO_ACCESS_TOKEN: ${{ secrets.GYAZO_ACCESS_TOKEN }}
